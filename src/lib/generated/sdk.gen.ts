// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateSessionData, CreateSessionResponses, DeleteMeData, DeleteMeResponses, DeleteRoomData, DeleteRoomResponses, DeleteSessionData, DeleteSessionResponses, GetAllAiSessionRatingsData, GetAllAiSessionRatingsResponses, GetAllGuidesData, GetAllGuidesResponses, GetData, GetGuideByIdData, GetGuideByIdResponses, GetMyGuideRatingsData, GetMyGuideRatingsResponses, GetMyProfileData, GetMyProfileResponses, GetResponses, GetSessionMessagesData, GetSessionMessagesResponses, GetSessionsData, GetSessionsResponses, ListMessagesData, ListMessagesResponses, ListRoomsData, ListRoomsResponses, LogoutData, LogoutResponses, RateAiSessionData, RateAiSessionResponses, RateGuideData, RateGuideResponses, RefreshAccessTokenData, RefreshAccessTokenResponses, SendMessage1Data, SendMessage1Responses, SendMessageData, SendMessageResponses, StartChatData, StartChatResponses, Test1Data, Test1Responses, Test2Data, Test2Responses, UpdateMyGuideProfileData, UpdateMyGuideProfileResponses, UpdateMyProfileData, UpdateMyProfileResponses, UpdateSessionTitleData, UpdateSessionTitleResponses, UpdateUserRoleData, UpdateUserRoleResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 가이드 평가 생성/수정
 */
export const rateGuide = <ThrowOnError extends boolean = false>(options: Options<RateGuideData, ThrowOnError>) => {
    return (options.client ?? client).put<RateGuideResponses, unknown, ThrowOnError>({
        url: '/api/rate/guides/{guideId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * AI 채팅 세션 평가 생성/수정
 */
export const rateAiSession = <ThrowOnError extends boolean = false>(options: Options<RateAiSessionData, ThrowOnError>) => {
    return (options.client ?? client).put<RateAiSessionResponses, unknown, ThrowOnError>({
        url: '/api/rate/aichat/sessions/{sessionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listMessages = <ThrowOnError extends boolean = false>(options: Options<ListMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListMessagesResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms/{roomId}/messages',
        ...options
    });
};

export const sendMessage = <ThrowOnError extends boolean = false>(options: Options<SendMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<SendMessageResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms/{roomId}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const startChat = <ThrowOnError extends boolean = false>(options: Options<StartChatData, ThrowOnError>) => {
    return (options.client ?? client).post<StartChatResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 신규 사용자 역할 선택
 */
export const updateUserRole = <ThrowOnError extends boolean = false>(options: Options<UpdateUserRoleData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateUserRoleResponses, unknown, ThrowOnError>({
        url: '/api/auth/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const refreshAccessToken = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAccessTokenResponses, unknown, ThrowOnError>({
        url: '/api/auth/refresh',
        ...options
    });
};

/**
 * 로그아웃
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutResponses, unknown, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

export const getSessions = <ThrowOnError extends boolean = false>(options?: Options<GetSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionsResponses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions',
        ...options
    });
};

export const createSession = <ThrowOnError extends boolean = false>(options?: Options<CreateSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSessionResponses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions',
        ...options
    });
};

export const getSessionMessages = <ThrowOnError extends boolean = false>(options: Options<GetSessionMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSessionMessagesResponses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions/{sessionId}/messages',
        ...options
    });
};

export const sendMessage1 = <ThrowOnError extends boolean = false>(options: Options<SendMessage1Data, ThrowOnError>) => {
    return (options.client ?? client).post<SendMessage1Responses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions/{sessionId}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 회원 탈퇴
 */
export const deleteMe = <ThrowOnError extends boolean = false>(options?: Options<DeleteMeData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMeResponses, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};

/**
 * 내 정보 조회
 */
export const getMyProfile = <ThrowOnError extends boolean = false>(options?: Options<GetMyProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMyProfileResponses, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};

/**
 * 내 프로필 수정
 */
export const updateMyProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateMyProfileData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateMyProfileResponses, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 가이드 프로필 수정
 */
export const updateMyGuideProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateMyGuideProfileData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateMyGuideProfileResponses, unknown, ThrowOnError>({
        url: '/api/guides/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateSessionTitle = <ThrowOnError extends boolean = false>(options: Options<UpdateSessionTitleData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateSessionTitleResponses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions/{sessionId}/title',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const test2 = <ThrowOnError extends boolean = false>(options?: Options<Test2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<Test2Responses, unknown, ThrowOnError>({
        url: '/weather/test2',
        ...options
    });
};

export const test1 = <ThrowOnError extends boolean = false>(options?: Options<Test1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<Test1Responses, unknown, ThrowOnError>({
        url: '/weather/test1',
        ...options
    });
};

export const listRooms = <ThrowOnError extends boolean = false>(options?: Options<ListRoomsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRoomsResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms',
        ...options
    });
};

export const deleteRoom = <ThrowOnError extends boolean = false>(options: Options<DeleteRoomData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteRoomResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms/{roomId}',
        ...options
    });
};

export const get = <ThrowOnError extends boolean = false>(options: Options<GetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetResponses, unknown, ThrowOnError>({
        url: '/api/userchat/rooms/{roomId}',
        ...options
    });
};

/**
 * 내가 받은 가이드 평가 조회
 */
export const getMyGuideRatings = <ThrowOnError extends boolean = false>(options?: Options<GetMyGuideRatingsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMyGuideRatingsResponses, unknown, ThrowOnError>({
        url: '/api/rate/guides/my',
        ...options
    });
};

/**
 * 관리자의 모든 AI 채팅 평가 조회
 */
export const getAllAiSessionRatings = <ThrowOnError extends boolean = false>(options: Options<GetAllAiSessionRatingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAllAiSessionRatingsResponses, unknown, ThrowOnError>({
        url: '/api/rate/admin/aichat/sessions',
        ...options
    });
};

/**
 * 가이드 목록 조회
 */
export const getAllGuides = <ThrowOnError extends boolean = false>(options?: Options<GetAllGuidesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllGuidesResponses, unknown, ThrowOnError>({
        url: '/api/guides',
        ...options
    });
};

/**
 * 가이드 단건 조회
 */
export const getGuideById = <ThrowOnError extends boolean = false>(options: Options<GetGuideByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGuideByIdResponses, unknown, ThrowOnError>({
        url: '/api/guides/{guideId}',
        ...options
    });
};

export const deleteSession = <ThrowOnError extends boolean = false>(options: Options<DeleteSessionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSessionResponses, unknown, ThrowOnError>({
        url: '/api/aichat/sessions/{sessionId}',
        ...options
    });
};
